// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef PROTOBUF_data_2eproto__INCLUDED
#define PROTOBUF_data_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_data_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsDoubleArrayImpl();
void InitDefaultsDoubleArray();
void InitDefaultsSparseMatrixImpl();
void InitDefaultsSparseMatrix();
void InitDefaultsSparseMatrixRowImpl();
void InitDefaultsSparseMatrixRow();
void InitDefaultsMap_EntriesEntry_DoNotUseImpl();
void InitDefaultsMap_EntriesEntry_DoNotUse();
void InitDefaultsMapImpl();
void InitDefaultsMap();
inline void InitDefaults() {
  InitDefaultsDoubleArray();
  InitDefaultsSparseMatrix();
  InitDefaultsSparseMatrixRow();
  InitDefaultsMap_EntriesEntry_DoNotUse();
  InitDefaultsMap();
}
}  // namespace protobuf_data_2eproto
namespace data {
class DoubleArray;
class DoubleArrayDefaultTypeInternal;
extern DoubleArrayDefaultTypeInternal _DoubleArray_default_instance_;
class Map;
class MapDefaultTypeInternal;
extern MapDefaultTypeInternal _Map_default_instance_;
class Map_EntriesEntry_DoNotUse;
class Map_EntriesEntry_DoNotUseDefaultTypeInternal;
extern Map_EntriesEntry_DoNotUseDefaultTypeInternal _Map_EntriesEntry_DoNotUse_default_instance_;
class SparseMatrix;
class SparseMatrixDefaultTypeInternal;
extern SparseMatrixDefaultTypeInternal _SparseMatrix_default_instance_;
class SparseMatrixRow;
class SparseMatrixRowDefaultTypeInternal;
extern SparseMatrixRowDefaultTypeInternal _SparseMatrixRow_default_instance_;
}  // namespace data
namespace data {

// ===================================================================

class DoubleArray : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data.DoubleArray) */ {
 public:
  DoubleArray();
  virtual ~DoubleArray();

  DoubleArray(const DoubleArray& from);

  inline DoubleArray& operator=(const DoubleArray& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DoubleArray(DoubleArray&& from) noexcept
    : DoubleArray() {
    *this = ::std::move(from);
  }

  inline DoubleArray& operator=(DoubleArray&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DoubleArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoubleArray* internal_default_instance() {
    return reinterpret_cast<const DoubleArray*>(
               &_DoubleArray_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DoubleArray* other);
  friend void swap(DoubleArray& a, DoubleArray& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoubleArray* New() const PROTOBUF_FINAL { return New(NULL); }

  DoubleArray* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DoubleArray& from);
  void MergeFrom(const DoubleArray& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DoubleArray* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double elems = 1;
  int elems_size() const;
  void clear_elems();
  static const int kElemsFieldNumber = 1;
  double elems(int index) const;
  void set_elems(int index, double value);
  void add_elems(double value);
  const ::google::protobuf::RepeatedField< double >&
      elems() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_elems();

  // @@protoc_insertion_point(class_scope:data.DoubleArray)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > elems_;
  mutable int _elems_cached_byte_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_data_2eproto::TableStruct;
  friend void ::protobuf_data_2eproto::InitDefaultsDoubleArrayImpl();
};
// -------------------------------------------------------------------

class SparseMatrix : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data.SparseMatrix) */ {
 public:
  SparseMatrix();
  virtual ~SparseMatrix();

  SparseMatrix(const SparseMatrix& from);

  inline SparseMatrix& operator=(const SparseMatrix& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SparseMatrix(SparseMatrix&& from) noexcept
    : SparseMatrix() {
    *this = ::std::move(from);
  }

  inline SparseMatrix& operator=(SparseMatrix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SparseMatrix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SparseMatrix* internal_default_instance() {
    return reinterpret_cast<const SparseMatrix*>(
               &_SparseMatrix_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SparseMatrix* other);
  friend void swap(SparseMatrix& a, SparseMatrix& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SparseMatrix* New() const PROTOBUF_FINAL { return New(NULL); }

  SparseMatrix* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SparseMatrix& from);
  void MergeFrom(const SparseMatrix& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SparseMatrix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .data.SparseMatrixRow rows = 1;
  int rows_size() const;
  void clear_rows();
  static const int kRowsFieldNumber = 1;
  const ::data::SparseMatrixRow& rows(int index) const;
  ::data::SparseMatrixRow* mutable_rows(int index);
  ::data::SparseMatrixRow* add_rows();
  ::google::protobuf::RepeatedPtrField< ::data::SparseMatrixRow >*
      mutable_rows();
  const ::google::protobuf::RepeatedPtrField< ::data::SparseMatrixRow >&
      rows() const;

  // @@protoc_insertion_point(class_scope:data.SparseMatrix)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::data::SparseMatrixRow > rows_;
  mutable int _cached_size_;
  friend struct ::protobuf_data_2eproto::TableStruct;
  friend void ::protobuf_data_2eproto::InitDefaultsSparseMatrixImpl();
};
// -------------------------------------------------------------------

class SparseMatrixRow : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data.SparseMatrixRow) */ {
 public:
  SparseMatrixRow();
  virtual ~SparseMatrixRow();

  SparseMatrixRow(const SparseMatrixRow& from);

  inline SparseMatrixRow& operator=(const SparseMatrixRow& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SparseMatrixRow(SparseMatrixRow&& from) noexcept
    : SparseMatrixRow() {
    *this = ::std::move(from);
  }

  inline SparseMatrixRow& operator=(SparseMatrixRow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SparseMatrixRow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SparseMatrixRow* internal_default_instance() {
    return reinterpret_cast<const SparseMatrixRow*>(
               &_SparseMatrixRow_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SparseMatrixRow* other);
  friend void swap(SparseMatrixRow& a, SparseMatrixRow& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SparseMatrixRow* New() const PROTOBUF_FINAL { return New(NULL); }

  SparseMatrixRow* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SparseMatrixRow& from);
  void MergeFrom(const SparseMatrixRow& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SparseMatrixRow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 cols = 1;
  int cols_size() const;
  void clear_cols();
  static const int kColsFieldNumber = 1;
  ::google::protobuf::uint64 cols(int index) const;
  void set_cols(int index, ::google::protobuf::uint64 value);
  void add_cols(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      cols() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_cols();

  // repeated double values = 2;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 2;
  double values(int index) const;
  void set_values(int index, double value);
  void add_values(double value);
  const ::google::protobuf::RepeatedField< double >&
      values() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:data.SparseMatrixRow)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > cols_;
  mutable int _cols_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > values_;
  mutable int _values_cached_byte_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_data_2eproto::TableStruct;
  friend void ::protobuf_data_2eproto::InitDefaultsSparseMatrixRowImpl();
};
// -------------------------------------------------------------------

class Map_EntriesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Map_EntriesEntry_DoNotUse, 
    ::std::string, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Map_EntriesEntry_DoNotUse, 
    ::std::string, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > SuperType;
  Map_EntriesEntry_DoNotUse();
  Map_EntriesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Map_EntriesEntry_DoNotUse& other);
  static const Map_EntriesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Map_EntriesEntry_DoNotUse*>(&_Map_EntriesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Map : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data.Map) */ {
 public:
  Map();
  virtual ~Map();

  Map(const Map& from);

  inline Map& operator=(const Map& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Map(Map&& from) noexcept
    : Map() {
    *this = ::std::move(from);
  }

  inline Map& operator=(Map&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Map& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Map* internal_default_instance() {
    return reinterpret_cast<const Map*>(
               &_Map_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Map* other);
  friend void swap(Map& a, Map& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Map* New() const PROTOBUF_FINAL { return New(NULL); }

  Map* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Map& from);
  void MergeFrom(const Map& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Map* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, double> entries = 1;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, double >&
      entries() const;
  ::google::protobuf::Map< ::std::string, double >*
      mutable_entries();

  // @@protoc_insertion_point(class_scope:data.Map)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      Map_EntriesEntry_DoNotUse,
      ::std::string, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 > entries_;
  mutable int _cached_size_;
  friend struct ::protobuf_data_2eproto::TableStruct;
  friend void ::protobuf_data_2eproto::InitDefaultsMapImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DoubleArray

// repeated double elems = 1;
inline int DoubleArray::elems_size() const {
  return elems_.size();
}
inline void DoubleArray::clear_elems() {
  elems_.Clear();
}
inline double DoubleArray::elems(int index) const {
  // @@protoc_insertion_point(field_get:data.DoubleArray.elems)
  return elems_.Get(index);
}
inline void DoubleArray::set_elems(int index, double value) {
  elems_.Set(index, value);
  // @@protoc_insertion_point(field_set:data.DoubleArray.elems)
}
inline void DoubleArray::add_elems(double value) {
  elems_.Add(value);
  // @@protoc_insertion_point(field_add:data.DoubleArray.elems)
}
inline const ::google::protobuf::RepeatedField< double >&
DoubleArray::elems() const {
  // @@protoc_insertion_point(field_list:data.DoubleArray.elems)
  return elems_;
}
inline ::google::protobuf::RepeatedField< double >*
DoubleArray::mutable_elems() {
  // @@protoc_insertion_point(field_mutable_list:data.DoubleArray.elems)
  return &elems_;
}

// -------------------------------------------------------------------

// SparseMatrix

// repeated .data.SparseMatrixRow rows = 1;
inline int SparseMatrix::rows_size() const {
  return rows_.size();
}
inline void SparseMatrix::clear_rows() {
  rows_.Clear();
}
inline const ::data::SparseMatrixRow& SparseMatrix::rows(int index) const {
  // @@protoc_insertion_point(field_get:data.SparseMatrix.rows)
  return rows_.Get(index);
}
inline ::data::SparseMatrixRow* SparseMatrix::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:data.SparseMatrix.rows)
  return rows_.Mutable(index);
}
inline ::data::SparseMatrixRow* SparseMatrix::add_rows() {
  // @@protoc_insertion_point(field_add:data.SparseMatrix.rows)
  return rows_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::data::SparseMatrixRow >*
SparseMatrix::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:data.SparseMatrix.rows)
  return &rows_;
}
inline const ::google::protobuf::RepeatedPtrField< ::data::SparseMatrixRow >&
SparseMatrix::rows() const {
  // @@protoc_insertion_point(field_list:data.SparseMatrix.rows)
  return rows_;
}

// -------------------------------------------------------------------

// SparseMatrixRow

// repeated uint64 cols = 1;
inline int SparseMatrixRow::cols_size() const {
  return cols_.size();
}
inline void SparseMatrixRow::clear_cols() {
  cols_.Clear();
}
inline ::google::protobuf::uint64 SparseMatrixRow::cols(int index) const {
  // @@protoc_insertion_point(field_get:data.SparseMatrixRow.cols)
  return cols_.Get(index);
}
inline void SparseMatrixRow::set_cols(int index, ::google::protobuf::uint64 value) {
  cols_.Set(index, value);
  // @@protoc_insertion_point(field_set:data.SparseMatrixRow.cols)
}
inline void SparseMatrixRow::add_cols(::google::protobuf::uint64 value) {
  cols_.Add(value);
  // @@protoc_insertion_point(field_add:data.SparseMatrixRow.cols)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
SparseMatrixRow::cols() const {
  // @@protoc_insertion_point(field_list:data.SparseMatrixRow.cols)
  return cols_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
SparseMatrixRow::mutable_cols() {
  // @@protoc_insertion_point(field_mutable_list:data.SparseMatrixRow.cols)
  return &cols_;
}

// repeated double values = 2;
inline int SparseMatrixRow::values_size() const {
  return values_.size();
}
inline void SparseMatrixRow::clear_values() {
  values_.Clear();
}
inline double SparseMatrixRow::values(int index) const {
  // @@protoc_insertion_point(field_get:data.SparseMatrixRow.values)
  return values_.Get(index);
}
inline void SparseMatrixRow::set_values(int index, double value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:data.SparseMatrixRow.values)
}
inline void SparseMatrixRow::add_values(double value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:data.SparseMatrixRow.values)
}
inline const ::google::protobuf::RepeatedField< double >&
SparseMatrixRow::values() const {
  // @@protoc_insertion_point(field_list:data.SparseMatrixRow.values)
  return values_;
}
inline ::google::protobuf::RepeatedField< double >*
SparseMatrixRow::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:data.SparseMatrixRow.values)
  return &values_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Map

// map<string, double> entries = 1;
inline int Map::entries_size() const {
  return entries_.size();
}
inline void Map::clear_entries() {
  entries_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, double >&
Map::entries() const {
  // @@protoc_insertion_point(field_map:data.Map.entries)
  return entries_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, double >*
Map::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_map:data.Map.entries)
  return entries_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace data

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_data_2eproto__INCLUDED
